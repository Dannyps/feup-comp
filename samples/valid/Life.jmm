class Life {

    int UNDERPOP_LIM;
    int OVERPOP_LIM;
    int REPRODUCE_NUM;

    int LOOPS_PER_MS;

    int xMax;
    int yMax;
    int[] fieldArray;



    public int[] field2(int[] lineLen) {
        int[] fieldArray;

        fieldArray = new int[100];
        lineLen[0] = 10;

        fieldArray[0] = 0;
        fieldArray[1] = 0;
        fieldArray[2] = 1;
        fieldArray[3] = 0;
        fieldArray[4] = 0;
        fieldArray[5] = 0;
        fieldArray[6] = 0;
        fieldArray[7] = 0;
        fieldArray[8] = 0;
        fieldArray[9] = 0;
        fieldArray[10] = 1;
        fieldArray[11] = 0;
        fieldArray[12] = 1;
        fieldArray[13] = 0;
        fieldArray[14] = 0;
        fieldArray[15] = 0;
        fieldArray[16] = 0;
        fieldArray[17] = 0;
        fieldArray[18] = 0;
        fieldArray[19] = 0;
        fieldArray[20] = 0;
        fieldArray[21] = 1;
        fieldArray[22] = 1;
        fieldArray[23] = 0;
        fieldArray[24] = 0;
        fieldArray[25] = 0;
        fieldArray[26] = 0;
        fieldArray[27] = 0;
        fieldArray[28] = 0;
        fieldArray[29] = 0;
        fieldArray[30] = 0;
        fieldArray[31] = 0;
        fieldArray[32] = 0;
        fieldArray[33] = 0;
        fieldArray[34] = 0;
        fieldArray[35] = 0;
        fieldArray[36] = 0;
        fieldArray[37] = 0;
        fieldArray[38] = 0;
        fieldArray[39] = 0;
        fieldArray[40] = 0;
        fieldArray[41] = 0;
        fieldArray[42] = 0;
        fieldArray[43] = 0;
        fieldArray[44] = 0;
        fieldArray[45] = 0;
        fieldArray[46] = 0;
        fieldArray[47] = 0;
        fieldArray[48] = 0;
        fieldArray[49] = 0;
        fieldArray[50] = 0;
        fieldArray[51] = 0;
        fieldArray[52] = 0;
        fieldArray[53] = 0;
        fieldArray[54] = 0;
        fieldArray[55] = 0;
        fieldArray[56] = 0;
        fieldArray[57] = 0;
        fieldArray[58] = 0;
        fieldArray[59] = 0;
        fieldArray[60] = 0;
        fieldArray[61] = 0;
        fieldArray[62] = 0;
        fieldArray[63] = 0;
        fieldArray[64] = 0;
        fieldArray[65] = 0;
        fieldArray[66] = 0;
        fieldArray[67] = 0;
        fieldArray[68] = 0;
        fieldArray[69] = 0;
        fieldArray[70] = 0;
        fieldArray[71] = 0;
        fieldArray[72] = 0;
        fieldArray[73] = 0;
        fieldArray[74] = 0;
        fieldArray[75] = 0;
        fieldArray[76] = 0;
        fieldArray[77] = 0;
        fieldArray[78] = 0;
        fieldArray[79] = 0;
        fieldArray[80] = 0;
        fieldArray[81] = 0;
        fieldArray[82] = 0;
        fieldArray[83] = 0;
        fieldArray[84] = 0;
        fieldArray[85] = 0;
        fieldArray[86] = 0;
        fieldArray[87] = 0;
        fieldArray[88] = 0;
        fieldArray[89] = 0;
        fieldArray[90] = 0;
        fieldArray[91] = 0;
        fieldArray[92] = 0;
        fieldArray[93] = 0;
        fieldArray[94] = 0;
        fieldArray[95] = 0;
        fieldArray[96] = 0;
        fieldArray[97] = 0;
        fieldArray[98] = 0;
        fieldArray[99] = 0;

        return fieldArray;

    }

    public boolean init() {
        int[] lineLenA;
        int lineLen;

        lineLenA = new int[1];

        UNDERPOP_LIM = 2;
        OVERPOP_LIM = 3;
        REPRODUCE_NUM = 3;

        LOOPS_PER_MS = 225000;

        fieldArray = this.field2(lineLenA);
        lineLen = lineLenA[0];

        xMax = lineLen - 1;
        yMax = fieldArray.length / lineLen - 1;

        return true;
    }

    public boolean lt(int a, int b) {
		return (a < b);
    }

    public boolean eq(int a, int b) {
		return (!this.lt(a, b) && !this.lt(b, a));
	}
	
	public boolean ne(int a, int b) {
		return (!this.eq(a, b));
	}
    
    public boolean le(int a, int b) {
		return !(!this.lt(a, b) && !this.eq(a, b));
    }
    
    public boolean gt(int a, int b) {
		return (!this.le(a, b));
    }
    
    public boolean ge(int a, int b) {
		return !(!this.gt(a, b) && !this.eq(a, b));
	}









    public boolean printField() {

        int i;
        int j;

        i = 0;
        j = 0;
        while (i < fieldArray.length) {
            if (this.gt(j,xMax)) {
                io.println();
                j = 0;
            }
            else {}
            io.print(fieldArray[i]);

            i = i + 1;
            j = j + 1;
        }

        io.println();
        io.println();
        return true;

    }

    public int trIdx(int x, int y) {
        return x + (xMax + 1) * y;
    }

    public int[] cartIdx(int absPos) {
        int x;
        int y;
        int xLim;
        int[] ret;

        xLim = xMax + 1;

        y = absPos / xLim;
        x = absPos - y * xLim;

        ret = new int[2];
        ret[0] = x;
        ret[1] = y;

        return ret;

    }

    public int[] getNeighborCoords(int absPos) {
        int x;
        int y;

        int upX;
        int upY;
        int downX;
        int downY;

        int[] cart;
        int[] ret;

        cart = this.cartIdx(absPos);
        x = cart[0];
        y = cart[1];

        if (x < xMax) {
            downX = x + 1;
            if (this.gt(x,0))
                upX = x - 1;
            else
                upX = xMax;
        } else {
            downX = 0;
            upX = x - 1;
        }

        if (y < yMax) {
            downY = y + 1;
            if (this.gt(y,0))
                upY = y - 1;
            else
                upY = yMax;
        } else {
            downY = 0;
            upY = y - 1;
        }

        ret = new int[8];
        // Clockwise from N
        ret[0] = this.trIdx(x, upY);
        ret[1] = this.trIdx(upX, upY);
        ret[2] = this.trIdx(upX, y);
        ret[3] = this.trIdx(upX, downY);
        ret[4] = this.trIdx(x, downY);
        ret[5] = this.trIdx(downX, downY);
        ret[6] = this.trIdx(downX, y);
        ret[7] = this.trIdx(downX, upY);

        return ret;

    }

    public int getLiveNeighborN(int absPos) {
        int[] neigh;
        int i;
        int ret;

        ret = 0;

        neigh = this.getNeighborCoords(absPos);

        i = 0;
        while (i < neigh.length) {
            if (this.ne(fieldArray[neigh[i]],0))
                ret = ret + 1;
            else {
            }

            i = i + 1;
        }

        return ret;
    }

    public boolean update() {
        int i;
        int cur;
        int neighN;
        boolean goodPop;
        int[] newField;

        newField = new int[fieldArray.length];

        i = 0;
        while (i < fieldArray.length) {
            cur = fieldArray[i];
            neighN = this.getLiveNeighborN(i);
            

            // Live cell
            if (cur < 1) {
                goodPop = this.ge(neighN,UNDERPOP_LIM) && this.le(neighN,OVERPOP_LIM);
                if (!goodPop) {
                    newField[i] = 0;
                } else {
                    newField[i] = fieldArray[i];
                }
            }
            // Dead cell
            else {
                if (this.eq(neighN,REPRODUCE_NUM)) {
                    newField[i] = 1;
                } else {
                    newField[i] = fieldArray[i];
                }
            }

            i = i + 1;
        }

        fieldArray = newField;
        return true;

    }

    public boolean busyWait(int ms) {
        int i;
        int n;
        
        n = ms * LOOPS_PER_MS;
        
        // Try optimizing this away!
        i = 0;
        while (i < n) {
            i = i + 1;
        }
        
        return true;
    }
    

    public static void main(String[] a) {
		Life l;
		int unused;

		l = new Life();
		l.init();

        while (true) {
            l.printField();
            l.update();
            unused = io.read();
        }

    }


}
