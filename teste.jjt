options {
    LOOKAHEAD=1;
	MULTI=true;
}
PARSER_BEGIN(Fac)
import java.io.FileReader;
import java.io.FileNotFoundException;

public class Fac {
    public int computeFac(SimpleNode node) {
        return 0;
    }

    public static void main(String[] args) throws ParseException {

        try {
            FileReader fileReader = new FileReader("text.txt");
            Fac fac = new Fac(fileReader);
            SimpleNode root = fac.Program();
    
            root.dump("");
    
            //System.out.println("Valor da express√£o: "+fac.computeFac(root));
            System.exit(0);
            
        } catch (FileNotFoundException e) {
            System.exit(0);
            //TODO: handle exception
        }
        //Fac fac = new Fac(System.in);
    }

    public static void showError(ParseException e, String errorMessage) {
        System.out.println(errorMessage);
    }
}
PARSER_END(Fac)

SKIP :
{
    " " | "\r" | "\t" | "\n"
}
TOKEN:
{
    < MAIN : "main" > |
    < STATIC : "static" > |
    < VOID : "void" > |
    < CLASSVISIBILITY : "public" > |
    < CLASS : "class" > |
    < STRING : "String" > |
    < IF : "if" > |
    < ELSE : "else" > |
    < WHILE : "while" > |
    < RETURN : "return" > |
    < INT : "int" > |
    < BOOLEAN : "boolean" > |
    < PVIRG : ";" > |
    < VIRG : "," > |
    < SUM : "+" > |
    < SUB : "-" > |
    < MULT : "*" > |
    < DIV : "/" > |
    < EQUAL : "=" > |
    < OPEN_CURLY_BRACKET : "{" > |
    < CLOSE_CURLY_BRACKET : "}" > |
    < OPEN_PARENTHESES : "(" > |
    < CLOSE_PARENTHESES : ")" > |
    < OPEN_BRACKET : "[" > |
    < CLOSE_BRACKET : "]" > |
    < NEW : "new" > |
    < THIS : "this" > |
    < TRUE : "true" > |
    < FALSE : "false" > |
    < LENGTH : "length" > |
    < EXTENDS : "extends" > |
    < NOT : "!" > |
    < AND : "&&" > |
    < LESS : "<" > |
    < GREATER : ">" > |
    < DOT : "." > |
    < INTEGERLITERAL : (["0"-"9"])+ > |
    < IDENTIFIER : ["a"-"z","A"-"Z","_","$"] (["a"-"z","A"-"Z","_","$","0"-"9"])* >
}

SimpleNode Program(): {}
{
    ClassDeclaration() <EOF> 
    {
        return jjtThis;
    }
}

void ClassDeclaration() : {}
{
    <CLASS> <IDENTIFIER> (<EXTENDS> <IDENTIFIER>)? <OPEN_CURLY_BRACKET>
    (
        (VarDeclaration())* 
        (<CLASSVISIBILITY> (MainDeclaration() | MethodDeclaration()))*
    )
    <CLOSE_CURLY_BRACKET>
}

void VarDeclaration() : {Token ident;}
{
	Type() ident=<IDENTIFIER> <PVIRG>
	{jjtThis.identifier = ident.image;}
}

void MainDeclaration() : {}
{
    <STATIC> <VOID> <MAIN> <OPEN_PARENTHESES> <STRING> <OPEN_BRACKET><CLOSE_BRACKET> <IDENTIFIER> <CLOSE_PARENTHESES> <OPEN_CURLY_BRACKET>
    (
        FunctionBody()
    )
    <CLOSE_CURLY_BRACKET>
}

void MethodDeclaration() : {}
{
    Type() <IDENTIFIER> <OPEN_PARENTHESES> (Type() <IDENTIFIER> (<VIRG> Type() <IDENTIFIER>)*)? <CLOSE_PARENTHESES> <OPEN_CURLY_BRACKET> 
    (
        FunctionBody()
        <RETURN> Expression() <PVIRG>
    )
    <CLOSE_CURLY_BRACKET>
}

void FunctionBody() #void : {}
{
    (LOOKAHEAD(2) VarDeclaration())*
    (Statement())*
}

void Type() : {Token type;}
{
    type=<BOOLEAN> | 
    type=<INT> (<OPEN_BRACKET> <CLOSE_BRACKET>)? | 
    type=<IDENTIFIER>
}

void Statement() : {}
{
    <OPEN_CURLY_BRACKET> (Statement())* <CLOSE_CURLY_BRACKET> |
    If() |
    While() |
    Expression()
    (
        <PVIRG> |
        <EQUAL> Expression() <PVIRG>
    )
}

void If() #void : {}
{
    try {
        <IF> <OPEN_PARENTHESES> Expression() <CLOSE_PARENTHESES> Statement() <ELSE> Statement()
    }
    catch (ParseException e) {
        showError(e, "if error");
        System.exit(0);
    }
}

void While() : {}
{
    try {
        <WHILE> <OPEN_PARENTHESES> WhileCondition() <CLOSE_PARENTHESES> WhileBody() 
    }
    catch (ParseException e) {
        showError(e, "while error");
        System.exit(0);
    }
}

void WhileCondition() : {}
{
	Expression()	
}

void WhileBody() : {} 
{
	Statement()	
}

void Term() #void : {}
{
    <INTEGERLITERAL> |
    <TRUE> |
    <FALSE> |
    <IDENTIFIER> |
    <THIS> |
    <NEW>
    (
        <INT> <OPEN_BRACKET> Expression() <CLOSE_BRACKET> | 
        <IDENTIFIER> <OPEN_PARENTHESES> <CLOSE_PARENTHESES>
    ) |
    <NOT> Term() |
    <OPEN_PARENTHESES> Expression() <CLOSE_PARENTHESES>
}

void Expression() : {} 
{
    Expression1()
    (
        <AND> Expression() |
        <OPEN_BRACKET> Expression() <CLOSE_BRACKET> |
        <DOT> 
        (
            <LENGTH> |
            <IDENTIFIER> <OPEN_PARENTHESES> (Expression() (<VIRG> Expression())*)? <CLOSE_PARENTHESES>
        )
    )?
}

void Expression1() #void : {} 
{
    Expression2() (<LESS> Expression2())*
}

void Expression2() #void : {} 
{
    Expression3() ((<SUM> | <SUB>) Expression3())*
}

void Expression3() #void : {} 
{
    Term() ((<MULT> | <DIV>) Term())*
}
